#+TITLE: My literate Rust-Emacs configuration
#+AUTHOR: Paul Alesius
#+DATE: <2023-04-02 Sun>

* Introduction
:PROPERTIES:
:TOC:   :include all
:END:
This is my personal literate emacs configuration which aims to become a dank Rust IDE configuration. This is my first attempt at creating an Emacs configuration form scratch so it will take some time to discover the right configuration for effective Rust development.

It aims to use they emacs keybindings style, with keymaps designed for aesthetics.

:CONTENTS:
- [[#introduction][Introduction]]
  - [[#configure-straightel-to-use-use-package][Configure straight.el to use use-package]]
  - [[#doom-emacs-theme][Doom Emacs theme]]
  - [[#doom-emacs-modeline][Doom Emacs modeline]]
  - [[#projectile][Projectile]]
  - [[#dashboard][Dashboard]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
  - [[#minibuffer-to-use-orderless-and-vertico][Minibuffer to use orderless and vertico]]
  - [[#persistent-history][Persistent history]]
  - [[#which-key][which-key]]
  - [[#remove-the-menu-bar-from-the-top-of-emacs][Remove the menu bar from the top of emacs]]
  - [[#helpful-for-visibility-into-variables-and-function-documentations][Helpful for visibility into variables and function documentations]]
  - [[#linum-relativeel][linum-relative.el]]
  - [[#key-bindings][Key bindings]]
    - [[#configure-the-buffers-keymap][Configure the buffers-keymap]]
  - [[#miscellaneous][Miscellaneous]]
    - [[#org-make-tocel][org-make-toc.el]]
:END:

** Configure straight.el to use use-package
Use use-package which is more asthetic.

#+BEGIN_SRC emacs-lisp
;;
;; Install straight-use-package
;;
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package '(use-package :ensure t))
(setq straight-use-package-by-default t
      use-package-always-ensure t)
#+END_SRC

** Doom Emacs theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-one t))
#+END_SRC

** Doom Emacs modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (display-battery-mode 1))
#+END_SRC

** Projectile
Project management
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-mode-line-prefix " Proj "
        projectile-project-search-path '("/storage/src/unnsvc")
        projectile-globally-ignored-file-suffixes '(".log" ".gz" ".zip")
        projectile-enable-caching t
        projectile-completion-system 'default
        projectile-switch-project-action 'projectile-dired)
  (projectile-mode +1))
#+END_SRC

** Dashboard
To be presented with basic information when starting Emacs.
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-banner-logo-title "Welcome to Rust Emacs"
        dashboard-items '((recents . 5)
                          (projects . 5)
                          (bookmarks . 5)
                          (agenda . 5)
                          (registers . 5))
        dashboard-footer-message '("Happy hacking!")
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-center-content t)
  (dashboard-setup-startup-hook))
#+END_SRC

** Orderless
Enable fuzzy matching and searching of terms in any order as you type them
#+BEGIN_SRC emacs-lisp
(use-package orderless)
#+END_SRC

** Vertico
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :custom
  (vertico-reverse-list nil)
  (vertico-cycle t)
  (vertico-count 100)
  (vertico-resize nil)
  (vertico-history nil))
#+END_SRC

** Minibuffer to use orderless and vertico
Minibuffer is a built-in package so :straight nil otherwise it will try to pull minibuffer.el from repos.
#+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :straight (:type built-in)
  :after (orderless vertico)
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

** Persistent history
Enable persistent history?
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :straight nil
  :config
  ;;(setq savehist-additional-variables '(vertico-sort-function
  ;;                                      vertico-recency-type))
  (savehist-mode 1))
#+END_SRC

** which-key
For observability into key combinations
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

** Remove the menu bar from the top of emacs
#+BEGIN_SRC emacs-lisp
(use-package menu-bar
  :straight (:type built-in)
  :config
  (menu-bar-mode -1))
#+END_SRC

** Helpful for visibility into variables and function documentations
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind (("C-h f" . #'helpful-callable)
         ("C-h v" . #'helpful-variable)
         ("C-h k" . #'helpful-key)))
#+END_SRC

** linum-relative.el
Relative line numbers don't seem to work at present, fix.
#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :straight nil
  :custom
  (display-line-numbers-type 'relative)
  (display-line-numbers 't)
  :init
  (display-line-numbers-mode)
  )
#+END_SRC

** Key bindings
Configure C-k to be a prefix key
#+BEGIN_SRC emacs-lisp
;; Create a new keymap
(use-package bind-key
  :after simple
  :config
  (defvar buffers-keymap (make-sparse-keymap))
  (bind-key "C-b" buffers-keymap))
#+END_SRC

*** Configure the buffers-keymap
#+BEGIN_SRC emacs-lisp
;; Group together keybindings for that keymap in a meta-package (virtual package)
(use-package meta-buffers-keymap
  :straight (:type built-in)
  :after bind-key
  :bind (:map buffers-keymap
              ("k" . kill-current-buffer)))
#+END_SRC

** Miscellaneous
*** org-make-toc.el
For a table of contents in the github README. Org mode is already loaded through (org-babble-load-file "README.org") by init.el, this means that we need to use the provided version of org mode or there will be a version mismatch.
#+BEGIN_SRC emacs-lisp
(use-package org
  :straight (:type built-in)
  :custom
  (org-startup-indented t))
(use-package org-make-toc
  :after org
  ;; Don't use straight, to use the built-in org mode otherwise straight will attempt to load a more recent org mode
  :hook (org-mode . #'org-mode-toc-mode))
#+END_SRC
